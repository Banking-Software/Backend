// <auto-generated />
using System;
using MicroFinance.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroFinance.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.BankSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalInterestBalance")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("BankTypeId");

                    b.HasIndex("LedgerId")
                        .IsUnique();

                    b.HasIndex("LedgerId", "Name")
                        .IsUnique();

                    b.ToTable("BankSetups");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.BankType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankTypes");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.DebitOrCredit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DebitOrCredits");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.GroupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CharKhataNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Schedule")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharKhataNumber")
                        .IsUnique();

                    b.HasIndex("AccountTypeId", "Name")
                        .IsUnique();

                    b.ToTable("GroupTypes");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.Ledger", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("CurrentBalance")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("DepreciationRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("HisabNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBank")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubLedgerActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupTypeId", "Name")
                        .IsUnique();

                    b.ToTable("Ledgers");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.SubLedger", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LedgerId");

                    b.HasIndex("Name", "LedgerId")
                        .IsUnique();

                    b.ToTable("SubLedgers");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientAccountPurposeNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientCast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientCastCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClientCitizenShipIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientCitizenShipIssueDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientCitizenshipNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ClientDateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientEducationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientFatherInLaw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientFatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientFatherNameNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientGenderCode")
                        .HasColumnType("int");

                    b.Property<string>("ClientGrandFatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientGrandFatherNameNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientIfMemberOfOtherParty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientIncomeSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientMartialStatusCode")
                        .HasColumnType("int");

                    b.Property<string>("ClientMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMobileNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMobileNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMotherInLaw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMotherNameNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientNameOfDaughters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientNameOfSons")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientNationalityIdStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientNepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientOtherInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientOtherInfo2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientPanNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientShareTypeInfoId")
                        .HasColumnType("int");

                    b.Property<string>("ClientSpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSpouseOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientTelephoneNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientTelephoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientUnitId")
                        .HasColumnType("int");

                    b.Property<string>("ClientVotingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorBranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKYMUpdated")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsModified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShareAllowed")
                        .HasColumnType("bit");

                    b.Property<int?>("KYMTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModificationCount")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeCitizenshipNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeIntroducedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeNepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeNepaliRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermanentDistrictCode")
                        .HasColumnType("int");

                    b.Property<string>("PermanentDistrictNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermanentStateCode")
                        .HasColumnType("int");

                    b.Property<string>("PermanentToleVillage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentToleVillageNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentVdcMunicipality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentVdcMunicipalityNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentWardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentWardNumberNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TemporaryDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TemporaryDistrictCode")
                        .HasColumnType("int");

                    b.Property<string>("TemporaryDistrictNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TemporaryStateCode")
                        .HasColumnType("int");

                    b.Property<string>("TemporaryToleVillage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryToleVillageNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryVdcMunicipality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryVdcMunicipalityNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryWardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryWardNumberNepali")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientGroupId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("ClientShareTypeInfoId");

                    b.HasIndex("ClientTypeId");

                    b.HasIndex("ClientUnitId");

                    b.HasIndex("KYMTypeId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ClientGroups");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientKYMType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("ClientKYMTypes");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("ClientTypes");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ClientUnits");
                });

            modelBuilder.Entity("MicroFinance.Models.CompanyProfile.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchCode")
                        .IsUnique();

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("MicroFinance.Models.CompanyProfile.CompanyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyDetails");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.DepositAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DailyDepositAmount")
                        .HasColumnType("int");

                    b.Property<int>("DepositSchemeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InterestAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("InterestPostingAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsSMSServiceActive")
                        .HasColumnType("bit");

                    b.Property<int?>("JointClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MatureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MatureInterestPostingAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinimumBalance")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Period")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodType")
                        .HasColumnType("int");

                    b.Property<decimal>("PrincipalAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TotalDepositAmount")
                        .HasColumnType("int");

                    b.Property<int?>("TotalDepositDay")
                        .HasColumnType("int");

                    b.Property<int?>("TotalInterestAmount")
                        .HasColumnType("int");

                    b.Property<int?>("TotalReturnAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("ClientId");

                    b.HasIndex("DepositSchemeId");

                    b.HasIndex("JointClientId");

                    b.ToTable("DepositAccounts");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.DepositScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Calculation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClosingCharge")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepositType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FineAmount")
                        .HasColumnType("int");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("InterestRateOnMinimumBalance")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("LedgerAsInterestAccountId")
                        .HasColumnType("int");

                    b.Property<int>("LedgerAsLiabilityAccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaximumInterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MinimumBalance")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumInterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostingSchemeId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LedgerAsInterestAccountId")
                        .IsUnique();

                    b.HasIndex("LedgerAsLiabilityAccountId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PostingSchemeId");

                    b.ToTable("DepositSchemes");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.FlexibleInterestRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepositSchemeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromAmount")
                        .HasColumnType("int");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("ToAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepositSchemeId");

                    b.ToTable("FlexibleInterestRates");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.PostingScheme", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PostingSchemes");
                });

            modelBuilder.Entity("MicroFinance.Models.RecordsWithCode.Cast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Casts");
                });

            modelBuilder.Entity("MicroFinance.Models.RecordsWithCode.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("MicroFinance.Models.RecordsWithCode.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("MicroFinance.Models.RecordsWithCode.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("MicroFinance.Models.RecordsWithCode.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("MicroFinance.Models.Transactions.DepositTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Employee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Narration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpeningCharge")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmountAfterTransaction")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("TransactionAmount")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("DepositTransaction");
                });

            modelBuilder.Entity("MicroFinance.Models.Transactions.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepositAccountId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepositAccountId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.BankSetup", b =>
                {
                    b.HasOne("MicroFinance.Models.AccountSetup.BankType", "BankType")
                        .WithMany("BankSetup")
                        .HasForeignKey("BankTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.AccountSetup.Ledger", "Ledger")
                        .WithOne("BankSetup")
                        .HasForeignKey("MicroFinance.Models.AccountSetup.BankSetup", "LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankType");

                    b.Navigation("Ledger");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.GroupType", b =>
                {
                    b.HasOne("MicroFinance.Models.AccountSetup.AccountType", "AccountType")
                        .WithMany("GroupType")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.Ledger", b =>
                {
                    b.HasOne("MicroFinance.Models.AccountSetup.GroupType", "GroupType")
                        .WithMany("Ledgers")
                        .HasForeignKey("GroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupType");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.SubLedger", b =>
                {
                    b.HasOne("MicroFinance.Models.AccountSetup.Ledger", "Ledger")
                        .WithMany("SubLedger")
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ledger");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.Client", b =>
                {
                    b.HasOne("MicroFinance.Models.ClientSetup.ClientGroup", "ClientGroup")
                        .WithMany("Clients")
                        .HasForeignKey("ClientGroupId");

                    b.HasOne("MicroFinance.Models.AccountSetup.Ledger", "ShareType")
                        .WithMany("Client")
                        .HasForeignKey("ClientShareTypeInfoId");

                    b.HasOne("MicroFinance.Models.ClientSetup.ClientType", "ClientType")
                        .WithMany("Clients")
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.ClientSetup.ClientUnit", "ClientUnit")
                        .WithMany("Clients")
                        .HasForeignKey("ClientUnitId");

                    b.HasOne("MicroFinance.Models.ClientSetup.ClientKYMType", "KYMType")
                        .WithMany("Clients")
                        .HasForeignKey("KYMTypeId");

                    b.Navigation("ClientGroup");

                    b.Navigation("ClientType");

                    b.Navigation("ClientUnit");

                    b.Navigation("KYMType");

                    b.Navigation("ShareType");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.DepositAccount", b =>
                {
                    b.HasOne("MicroFinance.Models.ClientSetup.Client", "Client")
                        .WithMany("DepositAccountSelf")
                        .HasForeignKey("ClientId")
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.DepositSetup.DepositScheme", "DepositScheme")
                        .WithMany("DepositAccounts")
                        .HasForeignKey("DepositSchemeId")
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.ClientSetup.Client", "JointClient")
                        .WithMany("DepositAccountJoint")
                        .HasForeignKey("JointClientId");

                    b.Navigation("Client");

                    b.Navigation("DepositScheme");

                    b.Navigation("JointClient");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.DepositScheme", b =>
                {
                    b.HasOne("MicroFinance.Models.AccountSetup.Ledger", "LedgerAsInterestAccount")
                        .WithOne("InterestAccount")
                        .HasForeignKey("MicroFinance.Models.DepositSetup.DepositScheme", "LedgerAsInterestAccountId");

                    b.HasOne("MicroFinance.Models.AccountSetup.Ledger", "LedgerAsLiabilityAccount")
                        .WithOne("LiabilityAccount")
                        .HasForeignKey("MicroFinance.Models.DepositSetup.DepositScheme", "LedgerAsLiabilityAccountId");

                    b.HasOne("MicroFinance.Models.DepositSetup.PostingScheme", "PostingScheme")
                        .WithMany("DepositScheme")
                        .HasForeignKey("PostingSchemeId");

                    b.Navigation("LedgerAsInterestAccount");

                    b.Navigation("LedgerAsLiabilityAccount");

                    b.Navigation("PostingScheme");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.FlexibleInterestRate", b =>
                {
                    b.HasOne("MicroFinance.Models.DepositSetup.DepositScheme", "DepositScheme")
                        .WithMany("FlexibleInterestRates")
                        .HasForeignKey("DepositSchemeId")
                        .IsRequired();

                    b.Navigation("DepositScheme");
                });

            modelBuilder.Entity("MicroFinance.Models.Transactions.DepositTransaction", b =>
                {
                    b.HasOne("MicroFinance.Models.Transactions.Transaction", "Transaction")
                        .WithOne("DepositTransaction")
                        .HasForeignKey("MicroFinance.Models.Transactions.DepositTransaction", "TransactionId")
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MicroFinance.Models.Transactions.Transaction", b =>
                {
                    b.HasOne("MicroFinance.Models.DepositSetup.DepositAccount", "DepositAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("DepositAccountId");

                    b.Navigation("DepositAccount");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.AccountType", b =>
                {
                    b.Navigation("GroupType");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.BankType", b =>
                {
                    b.Navigation("BankSetup");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.GroupType", b =>
                {
                    b.Navigation("Ledgers");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.Ledger", b =>
                {
                    b.Navigation("BankSetup")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("InterestAccount")
                        .IsRequired();

                    b.Navigation("LiabilityAccount")
                        .IsRequired();

                    b.Navigation("SubLedger");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.Client", b =>
                {
                    b.Navigation("DepositAccountJoint");

                    b.Navigation("DepositAccountSelf");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientGroup", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientKYMType", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientType", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientUnit", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.DepositAccount", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.DepositScheme", b =>
                {
                    b.Navigation("DepositAccounts");

                    b.Navigation("FlexibleInterestRates");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.PostingScheme", b =>
                {
                    b.Navigation("DepositScheme");
                });

            modelBuilder.Entity("MicroFinance.Models.Transactions.Transaction", b =>
                {
                    b.Navigation("DepositTransaction")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
