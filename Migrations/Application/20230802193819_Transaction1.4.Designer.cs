// <auto-generated />
using System;
using MicroFinance.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroFinance.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230802193819_Transaction1.4")]
    partial class Transaction14
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.BankSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalInterestBalance")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("BankTypeId");

                    b.HasIndex("LedgerId")
                        .IsUnique();

                    b.HasIndex("LedgerId", "Name")
                        .IsUnique();

                    b.ToTable("BankSetups");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.BankType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankTypes");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.DebitOrCredit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DebitOrCredits");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.GroupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CharKhataNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Schedule")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharKhataNumber")
                        .IsUnique();

                    b.HasIndex("AccountTypeId", "Name")
                        .IsUnique();

                    b.ToTable("GroupTypes");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.Ledger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("DepreciationRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("HisabNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBank")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubLedgerActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LedgerCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LedgerCode")
                        .IsUnique()
                        .HasFilter("[LedgerCode] IS NOT NULL");

                    b.HasIndex("GroupTypeId", "Name")
                        .IsUnique();

                    b.ToTable("Ledgers");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.SubLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SubLedgerCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LedgerId");

                    b.HasIndex("SubLedgerCode")
                        .IsUnique()
                        .HasFilter("[SubLedgerCode] IS NOT NULL");

                    b.HasIndex("Name", "LedgerId")
                        .IsUnique();

                    b.ToTable("SubLedgers");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientAccountPurposeNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientCastCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClientCitizenShipIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientCitizenShipIssueDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ClientCitizenshipFileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ClientCitizenshipFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientCitizenshipFileType")
                        .HasColumnType("int");

                    b.Property<string>("ClientCitizenshipNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ClientDateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientEducationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientFatherInLaw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientFatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientFatherNameNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientGenderCode")
                        .HasColumnType("int");

                    b.Property<string>("ClientGrandFatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientGrandFatherNameNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientIfMemberOfOtherParty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientIncomeSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientMartialStatusCode")
                        .HasColumnType("int");

                    b.Property<string>("ClientMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMobileNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMobileNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMotherInLaw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMotherNameNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientNameOfDaughters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientNameOfSons")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientNationalityIdStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientNepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientOtherInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientOtherInfo2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientPanNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ClientPhotoFileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ClientPhotoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientPhotoFileType")
                        .HasColumnType("int");

                    b.Property<int?>("ClientShareTypeInfoId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ClientSignatureFileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ClientSignatureFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientSignatureFileType")
                        .HasColumnType("int");

                    b.Property<string>("ClientSpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSpouseOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientTelephoneNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientTelephoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientUnitId")
                        .HasColumnType("int");

                    b.Property<string>("ClientVotingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKYMUpdated")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsModified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShareAllowed")
                        .HasColumnType("bit");

                    b.Property<int?>("KYMTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModificationCount")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeCitizenshipNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeIntroducedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeNepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeNepaliRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("NomineePhotoFileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NomineePhotoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NomineePhotoFileType")
                        .HasColumnType("int");

                    b.Property<string>("NomineeRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermanentDistrictCode")
                        .HasColumnType("int");

                    b.Property<int?>("PermanentStateCode")
                        .HasColumnType("int");

                    b.Property<string>("PermanentToleVillage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentToleVillageNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentVdcMunicipality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentVdcMunicipalityNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentWardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentWardNumberNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TemporaryDistrictCode")
                        .HasColumnType("int");

                    b.Property<string>("TemporaryStateCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryToleVillage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryToleVillageNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryVdcMunicipality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryVdcMunicipalityNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryWardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryWardNumberNepali")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientGroupId");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.HasIndex("ClientShareTypeInfoId");

                    b.HasIndex("ClientTypeId");

                    b.HasIndex("ClientUnitId");

                    b.HasIndex("KYMTypeId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ClientGroups");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientKYMType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("ClientKYMTypes");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("ClientTypes");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ClientUnits");
                });

            modelBuilder.Entity("MicroFinance.Models.CompanyProfile.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchCode")
                        .IsUnique();

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("MicroFinance.Models.CompanyProfile.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfDay")
                        .HasColumnType("int");

                    b.Property<int>("RunningDay")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Year", "Month")
                        .IsUnique();

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("MicroFinance.Models.CompanyProfile.CompanyDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddressNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("LogoFileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LogoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LogoFileType")
                        .HasColumnType("int");

                    b.Property<string>("PANNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyDetails");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.DepositAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyCalendarCreationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCalendarModificationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepositSchemeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExpectedDailyDepositAmount")
                        .HasColumnType("int");

                    b.Property<int?>("ExpectedTotalDepositAmount")
                        .HasColumnType("int");

                    b.Property<int?>("ExpectedTotalDepositDay")
                        .HasColumnType("int");

                    b.Property<int?>("ExpectedTotalInterestAmount")
                        .HasColumnType("int");

                    b.Property<int?>("ExpectedTotalReturnAmount")
                        .HasColumnType("int");

                    b.Property<decimal>("InterestAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("InterestPostingAccountNumberId")
                        .HasColumnType("int");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSMSServiceActive")
                        .HasColumnType("bit");

                    b.Property<string>("MatureDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MatureInterestPostingAccountNumberId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifierBranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifierId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomineeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("PeriodType")
                        .HasColumnType("int");

                    b.Property<decimal>("PrincipalAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("RealWorldCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RealWorldModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReferredByEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("Relation")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasFilter("[AccountNumber] IS NOT NULL");

                    b.HasIndex("ClientId");

                    b.HasIndex("DepositSchemeId");

                    b.HasIndex("InterestPostingAccountNumberId");

                    b.HasIndex("MatureInterestPostingAccountNumberId");

                    b.ToTable("DepositAccounts");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.DepositScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Calculation")
                        .HasColumnType("int");

                    b.Property<string>("CompanyCalendarCreationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCalendarModificationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepositSubledgerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("InterestRateOnMinimumBalance")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("InterestSubLedgerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaximumInterestRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MinimumBalance")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumInterestRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifierBranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifierId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostingScheme")
                        .HasColumnType("int");

                    b.Property<DateTime>("RealWorldCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RealWorldModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SchemeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchemeNameNepali")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchemeTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TaxSubledgerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepositSubledgerId")
                        .IsUnique();

                    b.HasIndex("InterestSubLedgerId")
                        .IsUnique();

                    b.HasIndex("SchemeName")
                        .IsUnique();

                    b.HasIndex("SchemeTypeId");

                    b.HasIndex("Symbol")
                        .IsUnique();

                    b.HasIndex("TaxSubledgerId")
                        .IsUnique();

                    b.ToTable("DepositSchemes");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.FlexibleInterestRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepositSchemeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromAmount")
                        .HasColumnType("int");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("ToAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepositSchemeId");

                    b.ToTable("FlexibleInterestRates");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.HelperTable.DepositAccountStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DepositAccountStatuses");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.HelperTable.DepositAccountType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DepositAccountTypes");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.HelperTable.DepositPostingScheme", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DepositPostingSchemes");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.HelperTable.DepositSchemeCalculationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DepositSchemeCalculationTypes");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.JointAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyCalendarEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCalendarStartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepositAccountId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("JointClientId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("RealWorldEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RealWorldStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepositAccountId");

                    b.HasIndex("JointClientId");

                    b.ToTable("JointAccounts");
                });

            modelBuilder.Entity("MicroFinance.Models.RecordsWithCode.Cast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Casts");
                });

            modelBuilder.Entity("MicroFinance.Models.RecordsWithCode.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("MicroFinance.Models.RecordsWithCode.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("MicroFinance.Models.RecordsWithCode.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("MicroFinance.Models.RecordsWithCode.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NepaliName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("MicroFinance.Models.Share.ShareAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentShareBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ShareAccount");
                });

            modelBuilder.Entity("MicroFinance.Models.Transactions.BaseTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AmountInWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCalendarCreationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCalendarModificationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifierBranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifierId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RealWorldCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RealWorldModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TransactionAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("VoucherNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("VoucherNumber")
                        .IsUnique()
                        .HasFilter("[VoucherNumber] IS NOT NULL");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MicroFinance.Models.Transactions.DepositAccountTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BalanceAfterTransaction")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("BankChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("CollectedByEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("DepositAccountId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasPrecision(18, 4)
                        .HasColumnType("int");

                    b.Property<string>("WithDrawalChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WithDrawalType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankDetailId");

                    b.HasIndex("DepositAccountId");

                    b.HasIndex("Id");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("DepositAccountTransactions");
                });

            modelBuilder.Entity("MicroFinance.Models.Transactions.LedgerTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BalanceAfterTransaction")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("LedgerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LedgerId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("LedgerTransactions");
                });

            modelBuilder.Entity("MicroFinance.Models.Transactions.SubLedgerTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BalanceAfterTransaction")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubLedgerId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubLedgerId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("SubLedgerTransactions");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.BankSetup", b =>
                {
                    b.HasOne("MicroFinance.Models.AccountSetup.BankType", "BankType")
                        .WithMany("BankSetup")
                        .HasForeignKey("BankTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.AccountSetup.Ledger", "Ledger")
                        .WithOne("BankSetup")
                        .HasForeignKey("MicroFinance.Models.AccountSetup.BankSetup", "LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankType");

                    b.Navigation("Ledger");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.GroupType", b =>
                {
                    b.HasOne("MicroFinance.Models.AccountSetup.AccountType", "AccountType")
                        .WithMany("GroupType")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.Ledger", b =>
                {
                    b.HasOne("MicroFinance.Models.AccountSetup.GroupType", "GroupType")
                        .WithMany("Ledgers")
                        .HasForeignKey("GroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupType");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.SubLedger", b =>
                {
                    b.HasOne("MicroFinance.Models.AccountSetup.Ledger", "Ledger")
                        .WithMany("SubLedger")
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ledger");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.Client", b =>
                {
                    b.HasOne("MicroFinance.Models.ClientSetup.ClientGroup", "ClientGroup")
                        .WithMany("Clients")
                        .HasForeignKey("ClientGroupId");

                    b.HasOne("MicroFinance.Models.AccountSetup.Ledger", "ShareType")
                        .WithMany("Client")
                        .HasForeignKey("ClientShareTypeInfoId");

                    b.HasOne("MicroFinance.Models.ClientSetup.ClientType", "ClientType")
                        .WithMany("Clients")
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.ClientSetup.ClientUnit", "ClientUnit")
                        .WithMany("Clients")
                        .HasForeignKey("ClientUnitId");

                    b.HasOne("MicroFinance.Models.ClientSetup.ClientKYMType", "KYMType")
                        .WithMany("Clients")
                        .HasForeignKey("KYMTypeId");

                    b.Navigation("ClientGroup");

                    b.Navigation("ClientType");

                    b.Navigation("ClientUnit");

                    b.Navigation("KYMType");

                    b.Navigation("ShareType");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.DepositAccount", b =>
                {
                    b.HasOne("MicroFinance.Models.ClientSetup.Client", "Client")
                        .WithMany("DepositAccountSelf")
                        .HasForeignKey("ClientId")
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.DepositSetup.DepositScheme", "DepositScheme")
                        .WithMany("DepositAccounts")
                        .HasForeignKey("DepositSchemeId")
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.DepositSetup.DepositAccount", "InterestPostingAccountNumber")
                        .WithMany()
                        .HasForeignKey("InterestPostingAccountNumberId");

                    b.HasOne("MicroFinance.Models.DepositSetup.DepositAccount", "MatureInterestPostingAccountNumber")
                        .WithMany()
                        .HasForeignKey("MatureInterestPostingAccountNumberId");

                    b.Navigation("Client");

                    b.Navigation("DepositScheme");

                    b.Navigation("InterestPostingAccountNumber");

                    b.Navigation("MatureInterestPostingAccountNumber");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.DepositScheme", b =>
                {
                    b.HasOne("MicroFinance.Models.AccountSetup.SubLedger", "DepositSubLedger")
                        .WithOne("DepositSchemes")
                        .HasForeignKey("MicroFinance.Models.DepositSetup.DepositScheme", "DepositSubledgerId")
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.AccountSetup.SubLedger", "InterestSubledger")
                        .WithOne("InterestSchemes")
                        .HasForeignKey("MicroFinance.Models.DepositSetup.DepositScheme", "InterestSubLedgerId")
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.AccountSetup.Ledger", "SchemeType")
                        .WithMany("DepositSchemes")
                        .HasForeignKey("SchemeTypeId")
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.AccountSetup.SubLedger", "TaxSubledger")
                        .WithOne("TaxSchemes")
                        .HasForeignKey("MicroFinance.Models.DepositSetup.DepositScheme", "TaxSubledgerId")
                        .IsRequired();

                    b.Navigation("DepositSubLedger");

                    b.Navigation("InterestSubledger");

                    b.Navigation("SchemeType");

                    b.Navigation("TaxSubledger");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.FlexibleInterestRate", b =>
                {
                    b.HasOne("MicroFinance.Models.DepositSetup.DepositScheme", "DepositScheme")
                        .WithMany("FlexibleInterestRates")
                        .HasForeignKey("DepositSchemeId")
                        .IsRequired();

                    b.Navigation("DepositScheme");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.JointAccount", b =>
                {
                    b.HasOne("MicroFinance.Models.DepositSetup.DepositAccount", "DepositAccount")
                        .WithMany("JointAccounts")
                        .HasForeignKey("DepositAccountId")
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.ClientSetup.Client", "JointClient")
                        .WithMany("JointAccounts")
                        .HasForeignKey("JointClientId")
                        .IsRequired();

                    b.Navigation("DepositAccount");

                    b.Navigation("JointClient");
                });

            modelBuilder.Entity("MicroFinance.Models.Share.ShareAccount", b =>
                {
                    b.HasOne("MicroFinance.Models.ClientSetup.Client", "Client")
                        .WithMany("ShareAccounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MicroFinance.Models.Transactions.DepositAccountTransaction", b =>
                {
                    b.HasOne("MicroFinance.Models.AccountSetup.BankSetup", "BankDetail")
                        .WithMany("DepositAccountTransactions")
                        .HasForeignKey("BankDetailId");

                    b.HasOne("MicroFinance.Models.DepositSetup.DepositAccount", "DepositAccount")
                        .WithMany("DepositAccountTransactions")
                        .HasForeignKey("DepositAccountId")
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.Transactions.BaseTransaction", "Transaction")
                        .WithOne("DepositAccountTransaction")
                        .HasForeignKey("MicroFinance.Models.Transactions.DepositAccountTransaction", "TransactionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BankDetail");

                    b.Navigation("DepositAccount");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MicroFinance.Models.Transactions.LedgerTransaction", b =>
                {
                    b.HasOne("MicroFinance.Models.AccountSetup.Ledger", "Ledger")
                        .WithMany("LedgerTransactions")
                        .HasForeignKey("LedgerId")
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.Transactions.BaseTransaction", "Transaction")
                        .WithOne("LedgerTransaction")
                        .HasForeignKey("MicroFinance.Models.Transactions.LedgerTransaction", "TransactionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Ledger");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MicroFinance.Models.Transactions.SubLedgerTransaction", b =>
                {
                    b.HasOne("MicroFinance.Models.AccountSetup.SubLedger", "SubLedger")
                        .WithMany("SubLedgerTransactions")
                        .HasForeignKey("SubLedgerId")
                        .IsRequired();

                    b.HasOne("MicroFinance.Models.Transactions.BaseTransaction", "Transaction")
                        .WithOne("SubLedgerTransaction")
                        .HasForeignKey("MicroFinance.Models.Transactions.SubLedgerTransaction", "TransactionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("SubLedger");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.AccountType", b =>
                {
                    b.Navigation("GroupType");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.BankSetup", b =>
                {
                    b.Navigation("DepositAccountTransactions");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.BankType", b =>
                {
                    b.Navigation("BankSetup");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.GroupType", b =>
                {
                    b.Navigation("Ledgers");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.Ledger", b =>
                {
                    b.Navigation("BankSetup")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("DepositSchemes");

                    b.Navigation("LedgerTransactions");

                    b.Navigation("SubLedger");
                });

            modelBuilder.Entity("MicroFinance.Models.AccountSetup.SubLedger", b =>
                {
                    b.Navigation("DepositSchemes")
                        .IsRequired();

                    b.Navigation("InterestSchemes")
                        .IsRequired();

                    b.Navigation("SubLedgerTransactions");

                    b.Navigation("TaxSchemes")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.Client", b =>
                {
                    b.Navigation("DepositAccountSelf");

                    b.Navigation("JointAccounts");

                    b.Navigation("ShareAccounts");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientGroup", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientKYMType", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientType", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("MicroFinance.Models.ClientSetup.ClientUnit", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.DepositAccount", b =>
                {
                    b.Navigation("DepositAccountTransactions");

                    b.Navigation("JointAccounts");
                });

            modelBuilder.Entity("MicroFinance.Models.DepositSetup.DepositScheme", b =>
                {
                    b.Navigation("DepositAccounts");

                    b.Navigation("FlexibleInterestRates");
                });

            modelBuilder.Entity("MicroFinance.Models.Transactions.BaseTransaction", b =>
                {
                    b.Navigation("DepositAccountTransaction")
                        .IsRequired();

                    b.Navigation("LedgerTransaction")
                        .IsRequired();

                    b.Navigation("SubLedgerTransaction")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
